# JCSKI Blog Nginx 安全配置 - v0.5.0 步骤19
# 适用于AWS EC2生产环境的Nginx安全强化配置
# 位置: /etc/nginx/conf.d/jcski-security.conf

# 隐藏Nginx版本信息
server_tokens off;

# 安全头部配置
map $sent_http_content_type $csp_policy {
    default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com; img-src 'self' data: blob: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https://fonts.googleapis.com; media-src 'self' data: blob:; object-src 'none'; frame-src 'self'; base-uri 'self'; form-action 'self'";
    ~text/html "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com; img-src 'self' data: blob: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https://fonts.googleapis.com; media-src 'self' data: blob:; object-src 'none'; frame-src 'self'; base-uri 'self'; form-action 'self'";
}

# 限制请求方法
map $request_method $not_allowed_method {
    default 1;
    GET 0;
    POST 0;
    HEAD 0;
    PUT 0;
    DELETE 0;
    OPTIONS 0;
    PATCH 0;
}

# 检测可疑用户代理
map $http_user_agent $suspicious_ua {
    default 0;
    ~*bot 0;  # 允许合法爬虫
    ~*crawler 0;
    ~*spider 0;
    ~*curl 1;     # 限制curl（可根据需要调整）
    ~*wget 1;     # 限制wget
    ~*scanner 1;  # 阻止扫描器
    ~*sqlmap 1;   # 阻止SQL注入工具
    ~*nmap 1;     # 阻止端口扫描
    "" 1;         # 空用户代理
}

# 限制上传文件大小
client_max_body_size 10M;

# 限制缓冲区大小以防止溢出攻击
client_body_buffer_size 16k;
client_header_buffer_size 1k;
large_client_header_buffers 4 8k;

# 设置超时以防止慢速攻击
client_body_timeout 12;
client_header_timeout 12;
keepalive_timeout 15;
send_timeout 10;

# Gzip安全配置
gzip_vary on;
gzip_disable "msie6";
gzip_comp_level 6;
gzip_min_length 1024;
gzip_types
    text/plain
    text/css
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml;

# SSL/TLS安全配置（当启用HTTPS时）
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
ssl_prefer_server_ciphers off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

# DH参数（需要生成）
# ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# OCSP Stapling
ssl_stapling on;
ssl_stapling_verify on;

# 速率限制配置
# 定义不同区域的限制策略
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=admin:10m rate=2r/s;
limit_req_zone $binary_remote_addr zone=uploads:10m rate=2r/s;

# 连接限制
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# 日志格式（包含安全相关信息）
log_format security_log '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time '
                       'ua="$upstream_addr" us="$upstream_status" '
                       'ut="$upstream_response_time" '
                       'cs=$upstream_cache_status '
                       'suspicious_ua=$suspicious_ua '
                       'blocked_method=$not_allowed_method';

# 主服务器配置
server {
    listen 80;
    server_name jcski.com www.jcski.com;
    
    # 安全日志
    access_log /var/log/nginx/jcski-security.log security_log;
    error_log /var/log/nginx/jcski-error.log warn;
    
    # 基础安全头部
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy $csp_policy always;
    
    # HTTPS重定向（当配置SSL后启用）
    # return 301 https://$server_name$request_uri;
    
    # 阻止可疑请求方法
    if ($not_allowed_method) {
        return 405;
    }
    
    # 阻止可疑用户代理
    if ($suspicious_ua) {
        return 403;
    }
    
    # 阻止访问敏感文件
    location ~* \.(env|log|ini|conf|bak|old|tmp)$ {
        deny all;
        return 404;
    }
    
    # 阻止访问隐藏文件
    location ~ /\. {
        deny all;
        return 404;
    }
    
    # 阻止访问备份文件
    location ~* ~$ {
        deny all;
        return 404;
    }
    
    # API端点限流
    location /api/auth {
        limit_req zone=auth burst=5 nodelay;
        limit_conn conn_limit_per_ip 10;
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API特定安全头部
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
    }
    
    location /api/admin {
        limit_req zone=admin burst=10 nodelay;
        limit_conn conn_limit_per_ip 5;
        
        # 额外的管理API保护
        allow 127.0.0.1;
        allow 10.0.0.0/8;     # AWS VPC内网
        allow 172.16.0.0/12;  # 私有网络
        allow 192.168.0.0/16; # 本地网络
        # deny all;  # 可以启用以限制管理API访问
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        limit_conn conn_limit_per_ip 20;
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 防止常见攻击
        if ($request_uri ~* "union.*select|insert.*into|delete.*from") {
            return 403;
        }
        if ($request_uri ~* "concat.*\(|hex\(|benchmark\(|sleep\(") {
            return 403;
        }
    }
    
    # 上传文件限制
    location /api/admin/media/upload {
        limit_req zone=uploads burst=3 nodelay;
        limit_conn conn_limit_per_ip 3;
        
        # 限制上传文件类型
        if ($request_filename ~* \.(php|asp|aspx|jsp|py|pl|sh)$) {
            return 403;
        }
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 上传超时设置
        proxy_connect_timeout 60;
        proxy_send_timeout 60;
        proxy_read_timeout 60;
    }
    
    # 静态文件缓存和安全
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        
        # 静态文件限流（比较宽松）
        limit_req zone=general burst=100 nodelay;
        
        # 直接服务静态文件或代理到Node.js
        try_files $uri @nodejs;
    }
    
    # 上传文件访问控制
    location /uploads/ {
        limit_req zone=general burst=50 nodelay;
        
        # 防止执行上传的脚本文件
        location ~* \.(php|asp|aspx|jsp|py|pl|sh)$ {
            deny all;
        }
        
        # 设置适当的MIME类型
        location ~* \.(jpg|jpeg|png|gif)$ {
            add_header Content-Type image/$1;
        }
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 主应用代理
    location / {
        limit_req zone=general burst=30 nodelay;
        limit_conn conn_limit_per_ip 30;
        
        # 阻止常见的攻击模式
        if ($args ~* "(union.*select|insert.*into|delete.*from)") {
            return 403;
        }
        if ($args ~* "(script.*alert|script.*confirm)") {
            return 403;
        }
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 代理超时设置
        proxy_connect_timeout 30;
        proxy_send_timeout 30;
        proxy_read_timeout 30;
        
        # 缓冲设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Node.js回退
    location @nodejs {
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 健康检查端点（内部使用）
    location /health {
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        proxy_pass http://localhost:3222;
        proxy_set_header Host $host;
    }
    
    # 错误页面
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 429 /429.html;
    error_page 500 502 503 504 /50x.html;
}

# HTTPS服务器配置（当配置SSL证书后启用）
#server {
#    listen 443 ssl http2;
#    server_name jcski.com www.jcski.com;
#    
#    # SSL证书配置
#    ssl_certificate /etc/letsencrypt/live/jcski.com/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/jcski.com/privkey.pem;
#    
#    # HSTS头部
#    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#    
#    # 其他配置与HTTP服务器相同...
#}